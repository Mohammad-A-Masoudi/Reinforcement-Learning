import numpy as np
from matplotlib import pyplot as plt
data = [[3, 1.5, 1],
        [2, 1, 0],
       [4, 1.5, 1],
       [3, 1 , 0],
       [3.5, 0.5, 1],
       [2, 0.5, 0],
       [5.5, 1 , 1],
       [1, 1, 0]]
def nn(w1,w2,m1,m2,b):
    z = w1*m1 + w2*m2 + b
    return sigmoid(z)

def sigmoid(x):
    return 1/(1+np.exp(-x))

def sigmoid_prime(x):
    return sigmoid(x) * (1- sigmoid(x))
    learning_rate = 0.2
costs = []
w1 = np.random.randn()
w2 = np.random.randn()
b = np.random.randn()

for i in range(50000):
    random_integer = np.random.randint(len(data))
    random_point = data[random_integer]
    #print(random_point)
    
    z = random_point[0] * w1 + random_point[1] *w2 + b
    h = sigmoid(z)
    target = point[2]
    cost = np.square(h - target)
    costs.append(cost)
    cost_prime_h = 2*(h - target)
    h_prime = sigmoid_prime(z)
    z_prime_w1 = point[0]
    z_prime_w2 = point[1]
    z_prime_b = 1
    cost_prime_w1 = cost_prime_h* h_prime * z_prime_w1
    cost_prime_w2 = cost_prime_h* h_prime * z_prime_w2
    cost_prime_b = cost_prime_h* h_prime * z_prime_b
    
    w1 = w1 - learning_rate * cost_prime_w1
    w2 = w2 - learning_rate * cost_prime_w2
    b = b - learning_rate * cost_prime_b
    
plt.plot(costs)
for j in range(len(data)):
    point = data[j]
    print(point)
    z = point[0] * w1 + point[1] *w2 + b
    pred = sigmoid(z)
    print(pred)
