#!/usr/bin/env python
# coding: utf-8

# In[1]:


import numpy as np
import time
import random
import gym
from IPython.display import clear_output


# In[2]:


env = gym.make("FrozenLake-v0")


# In[4]:


action_space_size = env.action_space.n
state_space_size = env.observation_space.n

q_table = np.zeros((env.observation_space.n,env.action_space.n))

print(q_table)


# In[8]:


num_episodes = 10000
max_steps_per_episode = 100
learning_rate = 0.1
discount_rate  = 0.99
exploration_rate = 1
max_exploration_rate= 1
min_exploration_rate = 0.01
exploration_decay_rate = 0.001


# In[19]:


rewards_all_episode = []

for episode in range(num_episodes):
    
    state = env.reset()
    done = False
    rewards_per_episode = 0
    
    for step in range(max_steps_per_episode):
        
        exploration_threshold = random.uniform(0,1)
        if exploration_threshold > exploration_rate:
            action = np.argmax(q_table[state,:])
        else:
            action = env.action_space.sample()
            
        new_state, reward, done, info = env.step(action)
        
        q_table[state,action] = q_table[state,action]*(1-learning_rate) + learning_rate*(reward+discount_rate*np.max(q_table[new_state,:]))
        
        state = new_state
        rewards_per_episode+=reward
        
        if done == True:
            break
            
    exploration_rate = min_exploration_rate + (max_exploration_rate - min_exploration_rate)*np.exp(-exploration_decay_rate*episode)
    rewards_all_episode.append(rewards_per_episode)
    
rewards_per_thousand_episode = np.split(np.array(rewards_all_episode), num_episodes/1000)

count = 1000
for r in rewards_per_thousand_episode:
    print(count, ':', str(sum(r/1000)))
    count += 1000

